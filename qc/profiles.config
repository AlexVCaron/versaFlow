
profiles {
    standard {
        process {
            tag = { "${task.process.replace(':', '<<')}<<${sid}" }
            withLabel: res_single_cpu { cpus = 1 }
            withLabel: res_max_cpu { cpus = params.max_cpu_per_process && (params.max_cpu_per_process < params.processes) ? params.max_cpu_per_process : params.processes }
            withLabel: res_conservative_cpu { cpus = params.max_cpu_per_process && (params.max_cpu_per_process < Math.max(1, params.processes - params.free_processes)) ? params.max_cpu_per_process : Math.max(1, params.processes - params.free_processes) }
            withLabel: hcp_full_node_override { cpus = params.processes }
            errorStrategy = {
                if (task.attempt <= params.max_attempts){
                    sleep(Math.pow(2, task.attempt) * 200 as long);
                    return 'retry'
                } else return 'ignore'
            }
            maxRetries = params.max_attempts
            maxErrors = -1
        }
    }
    hcp {
        process {
            tag = { "${task.process.replace(':', '<<')}<<${sid}" }
            withLabel: res_single_cpu { cpus = 1 }
            withLabel: res_max_cpu { cpus = params.max_cpu_per_process && (params.max_cpu_per_process < params.processes) ? params.max_cpu_per_process : params.processes }
            withLabel: res_conservative_cpu { cpus = params.max_cpu_per_process && (params.max_cpu_per_process < Math.max(1, params.processes - params.free_processes)) ? params.max_cpu_per_process : Math.max(1, params.processes - params.free_processes) }
            withLabel: hcp_full_node_override { cpus = params.processes }
            errorStrategy = {
                if (task.attempt <= params.max_attempts){
                    sleep(Math.pow(2, task.attempt) * 200 as long);
                    return 'retry'
                } else return 'ignore'
            }
            maxRetries = params.max_attempts
            maxErrors = -1
            executor = 'ignite'
            scratch = true
            stageInMode = 'copy'
            stageOutMode = 'rsync'
        }
        params.on_hcp = true
    }
    hcp_local {
        process {
            tag = { "${task.process.replace(':', '<<')}<<${sid}" }
            withLabel: res_single_cpu { cpus = 1 }
            withLabel: res_max_cpu { cpus = params.max_cpu_per_process && (params.max_cpu_per_process < params.processes) ? params.max_cpu_per_process : params.processes }
            withLabel: res_conservative_cpu { cpus = params.max_cpu_per_process && (params.max_cpu_per_process < Math.max(1, params.processes - params.free_processes)) ? params.max_cpu_per_process : Math.max(1, params.processes - params.free_processes) }
            withLabel: hcp_full_node_override { cpus = params.processes }
            errorStrategy = {
                if (task.attempt <= params.max_attempts){
                    sleep(Math.pow(2, task.attempt) * 200 as long);
                    return 'retry'
                } else return 'ignore'
            }
            maxRetries = params.max_attempts
            maxErrors = -1
            scratch = true
            stageInMode = 'copy'
            stageOutMode = 'rsync'
        }
        params.on_hcp = true
    }
    macos {
        process {
            tag = { "${task.process.replace(':', '<<')}<<${sid}" }
            withLabel: res_single_cpu { cpus = 1 }
            withLabel: res_max_cpu { cpus = params.max_cpu_per_process && (params.max_cpu_per_process < params.processes) ? params.max_cpu_per_process : params.processes }
            withLabel: res_conservative_cpu { cpus = params.max_cpu_per_process && (params.max_cpu_per_process < Math.max(1, params.processes - params.free_processes)) ? params.max_cpu_per_process : Math.max(1, params.processes - params.free_processes) }
            withLabel: hcp_full_node_override { cpus = params.processes }
            errorStrategy = {
                if (task.attempt <= params.max_attempts){
                    sleep(Math.pow(2, task.attempt) * 200 as long);
                    return 'retry'
                } else return 'ignore'
            }
            maxRetries = params.max_attempts
            maxErrors = -1
            scratch="/tmp"
        }
    }
    human {
        params.tissue_segmentation_root = "../.data/human/tissue_segmentation"
        params.generate_wm_segmentation = false
    }
}
